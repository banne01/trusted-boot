diff --git a/tboot-1.7.3/tboot/common/integrity.c b/tboot-1.7.3/tboot/common/integrity.c
index 066ba19..cfb47e6 100644
--- a/tboot-1.7.3/tboot/common/integrity.c
+++ b/tboot-1.7.3/tboot/common/integrity.c
@@ -78,17 +78,19 @@ extern void apply_policy(tb_error_t error);
 
 #define EVTTYPE_TB_MEASUREMENT (0x400 + 0x101)
 extern bool evtlog_append(uint8_t pcr, tb_hash_t *hash, uint32_t type);
+extern bool read_policy_from_tpm(tpm_nv_index_t index,
+                void* policy_index, size_t *policy_index_size);
+static void asset_tag_pcr22(void);
 
 typedef struct {
     uint8_t mac_key[VMAC_KEY_LEN/8];
     uint8_t shared_key[sizeof(_tboot_shared.s3_key)];
 } sealed_secrets_t;
 
-
 static bool extend_pcrs(void)
 {
     tpm_pcr_value_t pcr17, pcr18;
-
+    
     tpm_pcr_read(2, 17, &pcr17);
     tpm_pcr_read(2, 18, &pcr18);
     printk(TBOOT_DETA"PCRs before extending:\n");
@@ -111,10 +113,65 @@ static bool extend_pcrs(void)
     printk(TBOOT_DETA"PCRs after extending:\n");
     printk(TBOOT_DETA"  PCR 17: "); print_hash((tb_hash_t *)&pcr17, TB_HALG_SHA1);
     printk(TBOOT_DETA"  PCR 18: "); print_hash((tb_hash_t *)&pcr18, TB_HALG_SHA1);
-
+    asset_tag_pcr22(); /*asset tag pcr-22 */
+   
     return true;
 }
 
+
+/* extend pcr-22 with asset tag
+ * flow:
+ *   read TPM nv index#5 
+ *   calculate sha1 hash
+ *   extend pcr-22 with the hash
+ */
+
+static void asset_tag_pcr22(void)
+{
+    tpm_pcr_value_t pcr22;
+    uint32_t asset_tag[SHA1_LENGTH];
+    size_t asset_tag_size = SHA1_LENGTH; 
+    uint32_t ret, index_size;
+
+    printk(TBOOT_DETA"reading Asset TAG from from TPM NV_Index %u...\n",
+            TPM_NV_INDEX_GEO);
+    
+    /*check that TPM_NV_INDEX_GEO is a Sha1 Hash */
+    ret = tpm_get_nvindex_size(0, TPM_NV_INDEX_GEO, &index_size);
+    if ( ret != TPM_SUCCESS ) {
+        printk(TBOOT_DETA"\t :reading asset_tag failed from NV\n");
+        return;
+    }
+    if ( index_size != SHA1_LENGTH ) {
+        printk(TBOOT_DETA"\t :Geo_Index is not a SHA1 hash..exiting asset_tag\n");
+    }
+
+    /*fill buffer from NV */
+    memset(asset_tag, 0, SHA1_LENGTH);
+    if ( !read_policy_from_tpm(TPM_NV_INDEX_GEO,
+                asset_tag, &asset_tag_size) ) {
+        printk(TBOOT_DETA"\t :reading asset_tag failed from NV\n");
+        return;
+    }
+
+    tpm_pcr_read(2, 22, &pcr22);
+    printk(TBOOT_DETA"PCR22 before asset_tag extention:\n");
+    printk(TBOOT_DETA"  PCR 22: "); print_hash((tb_hash_t *)&pcr22, TB_HALG_SHA1);
+    printk(TBOOT_DETA"\t:%lu GEO NV bytes read\n", asset_tag_size);
+    memcpy((void*)(pcr22.digest), asset_tag, SHA1_LENGTH); 
+    
+    /* extend pcr-22 */
+    if ( tpm_pcr_extend(2, 22, &pcr22, NULL) != TPM_SUCCESS ) {
+        printk(TBOOT_DETA"\t:assent_tag extend failed \n");       
+        return;
+    }
+
+    tpm_pcr_read(2, 22, &pcr22);
+    printk(TBOOT_DETA"PCR22 after GEO-TAG extending:\n");
+    printk(TBOOT_DETA"  PCR 22: "); print_hash((tb_hash_t *)&pcr22, TB_HALG_SHA1);
+    return; 
+}
+
 static void print_pre_k_s3_state(void)
 {
     printk(TBOOT_DETA"pre_k_s3_state:\n");
diff --git a/tboot-1.7.3/tboot/common/policy.c b/tboot-1.7.3/tboot/common/policy.c
index e8a7704..c3463d3 100644
--- a/tboot-1.7.3/tboot/common/policy.c
+++ b/tboot-1.7.3/tboot/common/policy.c
@@ -184,7 +184,7 @@ static const tb_policy_t* g_policy = &_def_policy;
  *
  * policy_index_size is in/out
  */
-static bool read_policy_from_tpm(tpm_nv_index_t index,
+bool read_policy_from_tpm(tpm_nv_index_t index,
                 void* policy_index, size_t *policy_index_size)
 {
 #define NV_READ_SEG_SIZE    256
diff --git a/tboot-1.7.3/tboot/include/tpm.h b/tboot-1.7.3/tboot/include/tpm.h
index 67b42d4..8a03d84 100644
--- a/tboot-1.7.3/tboot/include/tpm.h
+++ b/tboot-1.7.3/tboot/include/tpm.h
@@ -51,6 +51,7 @@
 
 #define TPM_NR_LOCALITIES             5
 
+#define TPM_NV_INDEX_GEO              ((uint32_t)0x40000010)
 /*
  * return code:
  * The TPM has five types of return code. One indicates successful operation
