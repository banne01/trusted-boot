diff -r 6185d353a0c6 -r d92cf85cbe70 tboot/txt/verify.c
--- a/tboot/txt/verify.c	Tue Feb 04 16:19:29 2014 +0800
+++ b/tboot/txt/verify.c	Tue Feb 04 17:12:30 2014 +0800
@@ -73,9 +73,11 @@
 static unsigned long g_feat_ctrl_msr;
 
 
-static void read_processor_info(void)
+static bool read_processor_info(void)
 {
     unsigned long f1, f2;
+     /* eax: regs[0], ebx: regs[1], ecx: regs[2], edx: regs[3] */
+    uint32_t regs[4];
 
     /* is CPUID supported? */
     /* (it's supported if ID flag in EFLAGS can be set and cleared) */
@@ -93,13 +95,23 @@
         : "ir" (X86_EFLAGS_ID));
     if ( ((f1^f2) & X86_EFLAGS_ID) == 0 ) {
         g_cpuid_ext_feat_info = 0;
-        return;
+        printk(TBOOT_ERR"CPUID instruction is not supported.\n");
+        return false;
     }
 
+    do_cpuid(0, regs);
+    if ( regs[1] != 0x756e6547        /* "Genu" */
+         || regs[2] != 0x6c65746e     /* "ntel" */
+         || regs[3] != 0x49656e69 ) { /* "ineI" */
+        g_cpuid_ext_feat_info = 0;
+        printk(TBOOT_ERR"Non-Intel CPU detected.\n");
+        return false;
+    }
     g_cpuid_ext_feat_info = cpuid_ecx(1);
 
     g_feat_ctrl_msr = rdmsr(MSR_IA32_FEATURE_CONTROL);
     printk(TBOOT_DETA"IA32_FEATURE_CONTROL_MSR: %08lx\n", g_feat_ctrl_msr);
+    return true;
 }
 
 static bool supports_vmx(void)
@@ -174,7 +186,9 @@
 {
     capabilities_t cap;
 
-    read_processor_info();
+    /* processor must support cpuid and must be Intel CPU */
+    if ( !read_processor_info() )
+        return TB_ERR_SMX_NOT_SUPPORTED;
 
     /* processor must support SMX */
     if ( !supports_smx() )


