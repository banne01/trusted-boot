diff --git a/tboot-1.7.3/tboot/common/integrity.c b/tboot-1.7.3/tboot/common/integrity.c
index 066ba19..056ed87 100644
--- a/tboot-1.7.3/tboot/common/integrity.c
+++ b/tboot-1.7.3/tboot/common/integrity.c
@@ -48,9 +48,9 @@
 #include <tb_error.h>
 #include <vmac.h>
 #include <integrity.h>
-
 #include <page.h>
 #include <paging.h>
+
 extern char _end[];
 
 /* put in .data section to that they aren't cleared on S3 resume */
@@ -73,22 +73,26 @@ static __data tpm_pcr_value_t post_launch_pcr17, post_launch_pcr18;
 
 extern tboot_shared_t _tboot_shared;
 
+uint32_t asset_tag[PAGE_SIZE];
+
 extern bool hash_policy(tb_hash_t *hash, uint8_t hash_alg);
 extern void apply_policy(tb_error_t error);
 
 #define EVTTYPE_TB_MEASUREMENT (0x400 + 0x101)
 extern bool evtlog_append(uint8_t pcr, tb_hash_t *hash, uint32_t type);
+extern bool read_policy_from_tpm(tpm_nv_index_t index,
+                void* policy_index, size_t *policy_index_size);
+static void asset_tag_pcr22(void);
 
 typedef struct {
     uint8_t mac_key[VMAC_KEY_LEN/8];
     uint8_t shared_key[sizeof(_tboot_shared.s3_key)];
 } sealed_secrets_t;
 
-
 static bool extend_pcrs(void)
 {
     tpm_pcr_value_t pcr17, pcr18;
-
+    
     tpm_pcr_read(2, 17, &pcr17);
     tpm_pcr_read(2, 18, &pcr18);
     printk(TBOOT_DETA"PCRs before extending:\n");
@@ -111,10 +115,60 @@ static bool extend_pcrs(void)
     printk(TBOOT_DETA"PCRs after extending:\n");
     printk(TBOOT_DETA"  PCR 17: "); print_hash((tb_hash_t *)&pcr17, TB_HALG_SHA1);
     printk(TBOOT_DETA"  PCR 18: "); print_hash((tb_hash_t *)&pcr18, TB_HALG_SHA1);
-
+    asset_tag_pcr22(); /*asset tag pcr-22 */
+   
     return true;
 }
 
+
+/* extend pcr-22 with asset tag
+ * flow:
+ *   read TPM nv index#5 
+ *   calculate sha1 hash
+ *   extend pcr-22 with the hash
+ */
+
+static void asset_tag_pcr22(void)
+{
+    tpm_pcr_value_t pcr22;
+    size_t asset_tag_size = PAGE_SIZE; 
+    tb_hash_t digest;
+
+    printk(TBOOT_DETA"reading Asset TAG from from TPM NV_Index %u...\n",
+            TPM_NV_INDEX_GEO);
+    
+    /*fill buffer from NV */
+    memset(asset_tag, 0, PAGE_SIZE);
+
+    if ( !read_policy_from_tpm(TPM_NV_INDEX_GEO,
+                asset_tag, &asset_tag_size) ) {
+        printk(TBOOT_DETA"\t :reading asset_tag failed from NV\n");
+        return;
+    }
+    /*hash the buffer */
+    if ( !hash_buffer((const unsigned char*)asset_tag, asset_tag_size, &digest, TB_HALG_SHA1) ) {
+        printk(TBOOT_WARN"\t :asset_tag hash failed failed\n");
+        return;
+    }
+    
+    tpm_pcr_read(2, 22, &pcr22);
+    printk(TBOOT_DETA"PCR22 before asset_tag extention:\n");
+    printk(TBOOT_DETA"  PCR 22: "); print_hash((tb_hash_t *)&pcr22, TB_HALG_SHA1);
+    printk(TBOOT_DETA"\t:%lu GEO NV bytes read\n", asset_tag_size);
+    memcpy((void*)(pcr22.digest), digest.sha1, SHA1_LENGTH); 
+    
+    /* extend pcr-22 */
+    if ( tpm_pcr_extend(2, 22, &pcr22, NULL) != TPM_SUCCESS ) {
+        printk(TBOOT_DETA"\t:assent_tag extend failed \n");       
+        return;
+    }
+
+    tpm_pcr_read(2, 22, &pcr22);
+    printk(TBOOT_DETA"PCR22 after GEO-TAG extending:\n");
+    printk(TBOOT_DETA"  PCR 22: "); print_hash((tb_hash_t *)&pcr22, TB_HALG_SHA1);
+    return; 
+}
+
 static void print_pre_k_s3_state(void)
 {
     printk(TBOOT_DETA"pre_k_s3_state:\n");
diff --git a/tboot-1.7.3/tboot/common/policy.c b/tboot-1.7.3/tboot/common/policy.c
index e8a7704..c3463d3 100644
--- a/tboot-1.7.3/tboot/common/policy.c
+++ b/tboot-1.7.3/tboot/common/policy.c
@@ -184,7 +184,7 @@ static const tb_policy_t* g_policy = &_def_policy;
  *
  * policy_index_size is in/out
  */
-static bool read_policy_from_tpm(tpm_nv_index_t index,
+bool read_policy_from_tpm(tpm_nv_index_t index,
                 void* policy_index, size_t *policy_index_size)
 {
 #define NV_READ_SEG_SIZE    256
diff --git a/tboot-1.7.3/tboot/include/tpm.h b/tboot-1.7.3/tboot/include/tpm.h
index 67b42d4..5d54aab 100644
--- a/tboot-1.7.3/tboot/include/tpm.h
+++ b/tboot-1.7.3/tboot/include/tpm.h
@@ -51,6 +51,7 @@
 
 #define TPM_NR_LOCALITIES             5
 
+#define TPM_NV_INDEX_GEO              ((uint32_t)0x00000004)
 /*
  * return code:
  * The TPM has five types of return code. One indicates successful operation
diff --git a/tboot-1.7.3/xen_asset_tag.patch b/tboot-1.7.3/xen_asset_tag.patch
index b3bccfe..4ca11e2 100644
--- a/tboot-1.7.3/xen_asset_tag.patch
+++ b/tboot-1.7.3/xen_asset_tag.patch
@@ -1,45 +1,5 @@
-diff --git a/tboot-1.7.3/include/tboot.h b/tboot-1.7.3/include/tboot.h
-index 6619c56..08314c9 100644
---- a/tboot-1.7.3/include/tboot.h
-+++ b/tboot-1.7.3/include/tboot.h
-@@ -37,6 +37,8 @@
- #ifndef __TBOOT_H__
- #define __TBOOT_H__
- 
-+#include <page.h>
-+
- #ifndef __packed
- #define __packed   __attribute__ ((packed))
- #endif
-@@ -112,6 +114,11 @@ typedef struct __packed {
-     uint32_t  ap_wake_trigger;   /* kernel/VMM writes APIC ID to wake AP */
- } tboot_shared_t;
- 
-+typedef struct __packed {
-+    /* Buffer for the Asset tag */
-+    unsigned char asset_tag[PAGE_SIZE];
-+} tboot_asset_t;
-+
- #define TB_SHUTDOWN_REBOOT      0
- #define TB_SHUTDOWN_S5          1
- #define TB_SHUTDOWN_S4          2
-diff --git a/tboot-1.7.3/tboot/common/boot.S b/tboot-1.7.3/tboot/common/boot.S
-index 2e81fe9..5eca926 100644
---- a/tboot-1.7.3/tboot/common/boot.S
-+++ b/tboot-1.7.3/tboot/common/boot.S
-@@ -434,4 +434,10 @@ ENTRY(_tboot_shared)
- 	.fill	PAGE_SIZE,1,0
-         .align PAGE_SIZE, 0
- 
-+.section ".tboot_asset","w"
-+        .align PAGE_SIZE, 0
-+ENTRY(_tboot_asset)
-+	.fill	PAGE_SIZE,1,0
-+        .align PAGE_SIZE, 0
-+
- ENTRY(_end)
 diff --git a/tboot-1.7.3/tboot/common/integrity.c b/tboot-1.7.3/tboot/common/integrity.c
-index 066ba19..8f7c94c 100644
+index 066ba19..056ed87 100644
 --- a/tboot-1.7.3/tboot/common/integrity.c
 +++ b/tboot-1.7.3/tboot/common/integrity.c
 @@ -48,9 +48,9 @@
@@ -53,12 +13,12 @@ index 066ba19..8f7c94c 100644
  extern char _end[];
  
  /* put in .data section to that they aren't cleared on S3 resume */
-@@ -72,23 +72,26 @@ static __data uint32_t sealed_post_k_state_size;
- static __data tpm_pcr_value_t post_launch_pcr17, post_launch_pcr18;
+@@ -73,22 +73,26 @@ static __data tpm_pcr_value_t post_launch_pcr17, post_launch_pcr18;
  
  extern tboot_shared_t _tboot_shared;
-+extern tboot_asset_t  _tboot_asset;
  
++uint32_t asset_tag[PAGE_SIZE];
++
  extern bool hash_policy(tb_hash_t *hash, uint8_t hash_alg);
  extern void apply_policy(tb_error_t error);
  
@@ -82,7 +42,7 @@ index 066ba19..8f7c94c 100644
      tpm_pcr_read(2, 17, &pcr17);
      tpm_pcr_read(2, 18, &pcr18);
      printk(TBOOT_DETA"PCRs before extending:\n");
-@@ -111,10 +114,60 @@ static bool extend_pcrs(void)
+@@ -111,10 +115,60 @@ static bool extend_pcrs(void)
      printk(TBOOT_DETA"PCRs after extending:\n");
      printk(TBOOT_DETA"  PCR 17: "); print_hash((tb_hash_t *)&pcr17, TB_HALG_SHA1);
      printk(TBOOT_DETA"  PCR 18: "); print_hash((tb_hash_t *)&pcr18, TB_HALG_SHA1);
@@ -110,15 +70,15 @@ index 066ba19..8f7c94c 100644
 +            TPM_NV_INDEX_GEO);
 +    
 +    /*fill buffer from NV */
-+    memset(_tboot_asset.asset_tag, 0, PAGE_SIZE);
++    memset(asset_tag, 0, PAGE_SIZE);
 +
 +    if ( !read_policy_from_tpm(TPM_NV_INDEX_GEO,
-+                _tboot_asset.asset_tag, &asset_tag_size) ) {
++                asset_tag, &asset_tag_size) ) {
 +        printk(TBOOT_DETA"\t :reading asset_tag failed from NV\n");
 +        return;
 +    }
 +    /*hash the buffer */
-+    if ( !hash_buffer(_tboot_asset.asset_tag, asset_tag_size, &digest, TB_HALG_SHA1) ) {
++    if ( !hash_buffer((const unsigned char*)asset_tag, asset_tag_size, &digest, TB_HALG_SHA1) ) {
 +        printk(TBOOT_WARN"\t :asset_tag hash failed failed\n");
 +        return;
 +    }
@@ -157,27 +117,203 @@ index e8a7704..c3463d3 100644
                  void* policy_index, size_t *policy_index_size)
  {
  #define NV_READ_SEG_SIZE    256
-diff --git a/tboot-1.7.3/tboot/common/tboot.lds.x b/tboot-1.7.3/tboot/common/tboot.lds.x
-index 905618b..b7675c0 100644
---- a/tboot-1.7.3/tboot/common/tboot.lds.x
-+++ b/tboot-1.7.3/tboot/common/tboot.lds.x
-@@ -43,6 +43,7 @@ SECTIONS
-   .data : {			/* Data */
- 	*(.data)
- 	*(.tboot_shared)
-+	*(.tboot_asset)
- 	CONSTRUCTORS
- 	}
- 
 diff --git a/tboot-1.7.3/tboot/include/tpm.h b/tboot-1.7.3/tboot/include/tpm.h
-index 67b42d4..4e22df9 100644
+index 67b42d4..5d54aab 100644
 --- a/tboot-1.7.3/tboot/include/tpm.h
 +++ b/tboot-1.7.3/tboot/include/tpm.h
 @@ -51,6 +51,7 @@
  
  #define TPM_NR_LOCALITIES             5
  
-+#define TPM_NV_INDEX_GEO              ((uint32_t)0x00000005)
++#define TPM_NV_INDEX_GEO              ((uint32_t)0x00000004)
  /*
   * return code:
   * The TPM has five types of return code. One indicates successful operation
+diff --git a/tboot-1.7.3/xen_asset_tag.patch b/tboot-1.7.3/xen_asset_tag.patch
+index b3bccfe..e69de29 100644
+--- a/tboot-1.7.3/xen_asset_tag.patch
++++ b/tboot-1.7.3/xen_asset_tag.patch
+@@ -1,183 +0,0 @@
+-diff --git a/tboot-1.7.3/include/tboot.h b/tboot-1.7.3/include/tboot.h
+-index 6619c56..08314c9 100644
+---- a/tboot-1.7.3/include/tboot.h
+-+++ b/tboot-1.7.3/include/tboot.h
+-@@ -37,6 +37,8 @@
+- #ifndef __TBOOT_H__
+- #define __TBOOT_H__
+- 
+-+#include <page.h>
+-+
+- #ifndef __packed
+- #define __packed   __attribute__ ((packed))
+- #endif
+-@@ -112,6 +114,11 @@ typedef struct __packed {
+-     uint32_t  ap_wake_trigger;   /* kernel/VMM writes APIC ID to wake AP */
+- } tboot_shared_t;
+- 
+-+typedef struct __packed {
+-+    /* Buffer for the Asset tag */
+-+    unsigned char asset_tag[PAGE_SIZE];
+-+} tboot_asset_t;
+-+
+- #define TB_SHUTDOWN_REBOOT      0
+- #define TB_SHUTDOWN_S5          1
+- #define TB_SHUTDOWN_S4          2
+-diff --git a/tboot-1.7.3/tboot/common/boot.S b/tboot-1.7.3/tboot/common/boot.S
+-index 2e81fe9..5eca926 100644
+---- a/tboot-1.7.3/tboot/common/boot.S
+-+++ b/tboot-1.7.3/tboot/common/boot.S
+-@@ -434,4 +434,10 @@ ENTRY(_tboot_shared)
+- 	.fill	PAGE_SIZE,1,0
+-         .align PAGE_SIZE, 0
+- 
+-+.section ".tboot_asset","w"
+-+        .align PAGE_SIZE, 0
+-+ENTRY(_tboot_asset)
+-+	.fill	PAGE_SIZE,1,0
+-+        .align PAGE_SIZE, 0
+-+
+- ENTRY(_end)
+-diff --git a/tboot-1.7.3/tboot/common/integrity.c b/tboot-1.7.3/tboot/common/integrity.c
+-index 066ba19..8f7c94c 100644
+---- a/tboot-1.7.3/tboot/common/integrity.c
+-+++ b/tboot-1.7.3/tboot/common/integrity.c
+-@@ -48,9 +48,9 @@
+- #include <tb_error.h>
+- #include <vmac.h>
+- #include <integrity.h>
+--
+- #include <page.h>
+- #include <paging.h>
+-+
+- extern char _end[];
+- 
+- /* put in .data section to that they aren't cleared on S3 resume */
+-@@ -72,23 +72,26 @@ static __data uint32_t sealed_post_k_state_size;
+- static __data tpm_pcr_value_t post_launch_pcr17, post_launch_pcr18;
+- 
+- extern tboot_shared_t _tboot_shared;
+-+extern tboot_asset_t  _tboot_asset;
+- 
+- extern bool hash_policy(tb_hash_t *hash, uint8_t hash_alg);
+- extern void apply_policy(tb_error_t error);
+- 
+- #define EVTTYPE_TB_MEASUREMENT (0x400 + 0x101)
+- extern bool evtlog_append(uint8_t pcr, tb_hash_t *hash, uint32_t type);
+-+extern bool read_policy_from_tpm(tpm_nv_index_t index,
+-+                void* policy_index, size_t *policy_index_size);
+-+static void asset_tag_pcr22(void);
+- 
+- typedef struct {
+-     uint8_t mac_key[VMAC_KEY_LEN/8];
+-     uint8_t shared_key[sizeof(_tboot_shared.s3_key)];
+- } sealed_secrets_t;
+- 
+--
+- static bool extend_pcrs(void)
+- {
+-     tpm_pcr_value_t pcr17, pcr18;
+--
+-+    
+-     tpm_pcr_read(2, 17, &pcr17);
+-     tpm_pcr_read(2, 18, &pcr18);
+-     printk(TBOOT_DETA"PCRs before extending:\n");
+-@@ -111,10 +114,60 @@ static bool extend_pcrs(void)
+-     printk(TBOOT_DETA"PCRs after extending:\n");
+-     printk(TBOOT_DETA"  PCR 17: "); print_hash((tb_hash_t *)&pcr17, TB_HALG_SHA1);
+-     printk(TBOOT_DETA"  PCR 18: "); print_hash((tb_hash_t *)&pcr18, TB_HALG_SHA1);
+--
+-+    asset_tag_pcr22(); /*asset tag pcr-22 */
+-+   
+-     return true;
+- }
+- 
+-+
+-+/* extend pcr-22 with asset tag
+-+ * flow:
+-+ *   read TPM nv index#5 
+-+ *   calculate sha1 hash
+-+ *   extend pcr-22 with the hash
+-+ */
+-+
+-+static void asset_tag_pcr22(void)
+-+{
+-+    tpm_pcr_value_t pcr22;
+-+    size_t asset_tag_size = PAGE_SIZE; 
+-+    tb_hash_t digest;
+-+
+-+    printk(TBOOT_DETA"reading Asset TAG from from TPM NV_Index %u...\n",
+-+            TPM_NV_INDEX_GEO);
+-+    
+-+    /*fill buffer from NV */
+-+    memset(_tboot_asset.asset_tag, 0, PAGE_SIZE);
+-+
+-+    if ( !read_policy_from_tpm(TPM_NV_INDEX_GEO,
+-+                _tboot_asset.asset_tag, &asset_tag_size) ) {
+-+        printk(TBOOT_DETA"\t :reading asset_tag failed from NV\n");
+-+        return;
+-+    }
+-+    /*hash the buffer */
+-+    if ( !hash_buffer(_tboot_asset.asset_tag, asset_tag_size, &digest, TB_HALG_SHA1) ) {
+-+        printk(TBOOT_WARN"\t :asset_tag hash failed failed\n");
+-+        return;
+-+    }
+-+    
+-+    tpm_pcr_read(2, 22, &pcr22);
+-+    printk(TBOOT_DETA"PCR22 before asset_tag extention:\n");
+-+    printk(TBOOT_DETA"  PCR 22: "); print_hash((tb_hash_t *)&pcr22, TB_HALG_SHA1);
+-+    printk(TBOOT_DETA"\t:%lu GEO NV bytes read\n", asset_tag_size);
+-+    memcpy((void*)(pcr22.digest), digest.sha1, SHA1_LENGTH); 
+-+    
+-+    /* extend pcr-22 */
+-+    if ( tpm_pcr_extend(2, 22, &pcr22, NULL) != TPM_SUCCESS ) {
+-+        printk(TBOOT_DETA"\t:assent_tag extend failed \n");       
+-+        return;
+-+    }
+-+
+-+    tpm_pcr_read(2, 22, &pcr22);
+-+    printk(TBOOT_DETA"PCR22 after GEO-TAG extending:\n");
+-+    printk(TBOOT_DETA"  PCR 22: "); print_hash((tb_hash_t *)&pcr22, TB_HALG_SHA1);
+-+    return; 
+-+}
+-+
+- static void print_pre_k_s3_state(void)
+- {
+-     printk(TBOOT_DETA"pre_k_s3_state:\n");
+-diff --git a/tboot-1.7.3/tboot/common/policy.c b/tboot-1.7.3/tboot/common/policy.c
+-index e8a7704..c3463d3 100644
+---- a/tboot-1.7.3/tboot/common/policy.c
+-+++ b/tboot-1.7.3/tboot/common/policy.c
+-@@ -184,7 +184,7 @@ static const tb_policy_t* g_policy = &_def_policy;
+-  *
+-  * policy_index_size is in/out
+-  */
+--static bool read_policy_from_tpm(tpm_nv_index_t index,
+-+bool read_policy_from_tpm(tpm_nv_index_t index,
+-                 void* policy_index, size_t *policy_index_size)
+- {
+- #define NV_READ_SEG_SIZE    256
+-diff --git a/tboot-1.7.3/tboot/common/tboot.lds.x b/tboot-1.7.3/tboot/common/tboot.lds.x
+-index 905618b..b7675c0 100644
+---- a/tboot-1.7.3/tboot/common/tboot.lds.x
+-+++ b/tboot-1.7.3/tboot/common/tboot.lds.x
+-@@ -43,6 +43,7 @@ SECTIONS
+-   .data : {			/* Data */
+- 	*(.data)
+- 	*(.tboot_shared)
+-+	*(.tboot_asset)
+- 	CONSTRUCTORS
+- 	}
+- 
+-diff --git a/tboot-1.7.3/tboot/include/tpm.h b/tboot-1.7.3/tboot/include/tpm.h
+-index 67b42d4..4e22df9 100644
+---- a/tboot-1.7.3/tboot/include/tpm.h
+-+++ b/tboot-1.7.3/tboot/include/tpm.h
+-@@ -51,6 +51,7 @@
+- 
+- #define TPM_NR_LOCALITIES             5
+- 
+-+#define TPM_NV_INDEX_GEO              ((uint32_t)0x00000005)
+- /*
+-  * return code:
+-  * The TPM has five types of return code. One indicates successful operation
